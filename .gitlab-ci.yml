default:
  tags:
    - ted

.rust_image:
  image: "rust:latest"
  before_script:
    - rustc --version
    - cargo --version

.docker_image:
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

variables:
  # Use TLS https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#tls-enabled
  DOCKER_TLS_CERTDIR: "/certs"
  IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  RELEASE_IMAGE: $CI_REGISTRY_IMAGE:latest
  COMMIT_SHA: $CI_COMMIT_SHORT_SHA

stages:
  - Checks
  - Unit Tests
  - Build
  - Functional Tests
  - Release

lint:
  extends: .rust_image
  stage: Checks
  script:
    - rustup component add clippy
    - cargo clippy -- -D warnings

format:
  extends: .rust_image
  stage: Checks
  script:
    - rustup component add rustfmt
    - cargo fmt -- --check

audit:
  extends: .rust_image
  stage: Checks
  script:
    - cargo install cargo-audit
    - cargo audit --ignore RUSTSEC-2020-0071 --ignore RUSTSEC-2023-0034 # TODO: Fix both vulnerabilities

unit-tests:
  extends: .rust_image
  stage: Unit Tests
  script:
    - cargo test
    # Note: Increase timeout to 120 seconds (default is 60 seconds) because one integration test is long since it fails
    # to converge in 1000 iterations
    # TODO: Fix issue with ted (gitlab runner) by modifying its config. See here for more details
    #  https://github.com/xd009642/tarpaulin/issues/146#issuecomment-554302029
    # - cargo install cargo-tarpaulin
    # - cargo tarpaulin --ignore-tests

build:
  extends: .docker_image
  stage: Build
  script:
    - docker build --pull -t $IMAGE .
    - docker push $IMAGE

functional-tests:
  extends: .docker_image
  stage: Functional Tests
  variables:
    TEST_CONTAINER_NAME: test_server
  script:
    # Run the server in container and sleep 10 seconds for it to start (TODO: Improve by adding health endpoint)
    - docker pull $IMAGE
    - nohup docker run --name=$TEST_CONTAINER_NAME --network="host" $IMAGE &
    - sleep 10
    # Run example clients
    - docker run --network="host" $IMAGE /bin/bash -c "allocate_client"
    - docker run --network="host" $IMAGE /bin/bash -c "analyze_client"
    - docker run --network="host" $IMAGE /bin/bash -c "api_client"
    # Clean-up
    - docker container rm $TEST_CONTAINER_NAME

release-image:
  stage: Release
  script:
    - docker pull $IMAGE
    - docker tag $IMAGE $RELEASE_IMAGE
    - docker push $RELEASE_IMAGE
  only:
    - master
